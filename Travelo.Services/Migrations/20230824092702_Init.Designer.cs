// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travelo.Services.Database;

#nullable disable

namespace Travelo.Services.Migrations
{
    [DbContext(typeof(TraveloContext))]
    [Migration("20230824092702_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccomodationFacility", b =>
                {
                    b.Property<int>("AccomodationsId")
                        .HasColumnType("int");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.HasKey("AccomodationsId", "FacilitiesId");

                    b.HasIndex("FacilitiesId");

                    b.ToTable("AccomodationFacility");

                    b.HasData(
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 1
                        },
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 2
                        },
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 3
                        },
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 4
                        },
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 5
                        },
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 6
                        },
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 7
                        },
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 8
                        },
                        new
                        {
                            AccomodationsId = 1,
                            FacilitiesId = 9
                        },
                        new
                        {
                            AccomodationsId = 2,
                            FacilitiesId = 1
                        },
                        new
                        {
                            AccomodationsId = 2,
                            FacilitiesId = 2
                        },
                        new
                        {
                            AccomodationsId = 2,
                            FacilitiesId = 3
                        },
                        new
                        {
                            AccomodationsId = 2,
                            FacilitiesId = 4
                        },
                        new
                        {
                            AccomodationsId = 2,
                            FacilitiesId = 5
                        },
                        new
                        {
                            AccomodationsId = 2,
                            FacilitiesId = 6
                        },
                        new
                        {
                            AccomodationsId = 2,
                            FacilitiesId = 8
                        },
                        new
                        {
                            AccomodationsId = 2,
                            FacilitiesId = 9
                        },
                        new
                        {
                            AccomodationsId = 3,
                            FacilitiesId = 1
                        },
                        new
                        {
                            AccomodationsId = 3,
                            FacilitiesId = 2
                        },
                        new
                        {
                            AccomodationsId = 3,
                            FacilitiesId = 3
                        },
                        new
                        {
                            AccomodationsId = 3,
                            FacilitiesId = 4
                        },
                        new
                        {
                            AccomodationsId = 3,
                            FacilitiesId = 5
                        },
                        new
                        {
                            AccomodationsId = 3,
                            FacilitiesId = 6
                        },
                        new
                        {
                            AccomodationsId = 3,
                            FacilitiesId = 8
                        },
                        new
                        {
                            AccomodationsId = 4,
                            FacilitiesId = 1
                        },
                        new
                        {
                            AccomodationsId = 4,
                            FacilitiesId = 2
                        },
                        new
                        {
                            AccomodationsId = 4,
                            FacilitiesId = 3
                        },
                        new
                        {
                            AccomodationsId = 4,
                            FacilitiesId = 4
                        },
                        new
                        {
                            AccomodationsId = 4,
                            FacilitiesId = 5
                        },
                        new
                        {
                            AccomodationsId = 4,
                            FacilitiesId = 6
                        },
                        new
                        {
                            AccomodationsId = 4,
                            FacilitiesId = 9
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 1
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 2
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 3
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 4
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 5
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 6
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 7
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 8
                        },
                        new
                        {
                            AccomodationsId = 5,
                            FacilitiesId = 9
                        });
                });

            modelBuilder.Entity("CityTag", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("citiesId")
                        .HasColumnType("int");

                    b.HasKey("TagsId", "citiesId");

                    b.HasIndex("citiesId");

                    b.ToTable("CityTag");

                    b.HasData(
                        new
                        {
                            TagsId = 2,
                            citiesId = 1
                        },
                        new
                        {
                            TagsId = 3,
                            citiesId = 1
                        },
                        new
                        {
                            TagsId = 5,
                            citiesId = 1
                        },
                        new
                        {
                            TagsId = 2,
                            citiesId = 2
                        },
                        new
                        {
                            TagsId = 3,
                            citiesId = 2
                        },
                        new
                        {
                            TagsId = 5,
                            citiesId = 2
                        },
                        new
                        {
                            TagsId = 6,
                            citiesId = 2
                        },
                        new
                        {
                            TagsId = 2,
                            citiesId = 5
                        },
                        new
                        {
                            TagsId = 5,
                            citiesId = 5
                        },
                        new
                        {
                            TagsId = 6,
                            citiesId = 5
                        },
                        new
                        {
                            TagsId = 1,
                            citiesId = 6
                        },
                        new
                        {
                            TagsId = 2,
                            citiesId = 6
                        },
                        new
                        {
                            TagsId = 3,
                            citiesId = 6
                        },
                        new
                        {
                            TagsId = 4,
                            citiesId = 6
                        },
                        new
                        {
                            TagsId = 6,
                            citiesId = 6
                        },
                        new
                        {
                            TagsId = 1,
                            citiesId = 7
                        },
                        new
                        {
                            TagsId = 2,
                            citiesId = 7
                        },
                        new
                        {
                            TagsId = 3,
                            citiesId = 7
                        },
                        new
                        {
                            TagsId = 4,
                            citiesId = 7
                        },
                        new
                        {
                            TagsId = 6,
                            citiesId = 7
                        },
                        new
                        {
                            TagsId = 1,
                            citiesId = 8
                        },
                        new
                        {
                            TagsId = 2,
                            citiesId = 8
                        },
                        new
                        {
                            TagsId = 3,
                            citiesId = 8
                        },
                        new
                        {
                            TagsId = 4,
                            citiesId = 8
                        },
                        new
                        {
                            TagsId = 6,
                            citiesId = 8
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.Accomodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Images")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Accomodations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Stara Ilicka bb",
                            CityId = 2,
                            Description = "Relaxed rooms with traditional decor offer Internet access, flat-screens, minifridges and safes, plus balconies. Upgraded rooms add living areas and whirlpool tubs. Elegant 3-bedroom apartments feature kitchens and dining areas. Room service is available.",
                            Name = "Hotel Bevanda",
                            PostalCode = "88000"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kralja Petra Kresimira",
                            CityId = 7,
                            Description = "Located right next to the beach, Hotel Park Makarska offers an outdoor pool and a sun terrace, as well as an à-la-carte restaurant that serves international dishes. The hotel`s Spa and Wellness Center features a Finnish and Turkish sauna, a hydro massage bath and fitness room, as well as indoor pool. There you can enjoy integrated beauty programs, facial and body treatments and a rich selection of special massage techniques. Free WiFi access is available.",
                            Name = "Hotel Park",
                            PostalCode = "21300"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Marsala Tita bb",
                            CityId = 1,
                            Description = "Relaxed rooms with traditional decor offer Internet access, flat-screens, minifridges and safes, plus balconies. Upgraded rooms add living areas and whirlpool tubs. Elegant 3-bedroom apartments feature kitchens and dining areas. Room service is available.",
                            Name = "Motel Jet Star",
                            PostalCode = "75270"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Dr. Pintola 23",
                            CityId = 4,
                            Description = "Located close to Sarajevo's green district of Ilidza and 2 km from Sarajevo International Airport, Hollywood Hotel offers spacious and modern rooms with free WiFi, air conditioning and a bath or shower. Guests can use the hotel's indoor pool, sauna and fitness centre free of charge.",
                            Name = "Hollywood Hotel",
                            PostalCode = "7100"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Avenija Dubrava 70,",
                            CityId = 5,
                            Description = "Located in the eastern part of Zagreb right next to the tram stop, Hotel Residence is a 15-minute tram ride away from the city centre. Free Wi-Fi is available.\n\nResidence’s air-conditioned rooms are decorated in a very elegant and understated style. They feature marble bathrooms, a flat-screen TV with satellite channels and a minibar. Some rooms also include a hot tub.",
                            Name = "Hotel Residence",
                            PostalCode = "10040"
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "test@gmail.com",
                            PasswordHash = "Mb3xwhZo+rxBspxLceGrYNXQDl8=",
                            PasswordSalt = "9rT9FTnj0y1PDoTwG1zkmg==",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "travelo@gmail.com",
                            PasswordHash = "Mb3xwhZo+rxBspxLceGrYNXQDl8=",
                            PasswordSalt = "9rT9FTnj0y1PDoTwG1zkmg==",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "nova@gmail.com",
                            PasswordHash = "Mb3xwhZo+rxBspxLceGrYNXQDl8=",
                            PasswordSalt = "9rT9FTnj0y1PDoTwG1zkmg==",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Travelo.Services.Database.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.ToTable("Agency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                            AccountId = 2,
                            Address = "Mostarska 1",
                            CityId = 2,
                            Name = "Travelo",
                            Phone = "+38761234567",
                            PostalCode = "88000",
                            Status = true,
                            WebsiteUrl = "travelo.ba"
                        },
                        new
                        {
                            Id = 2,
                            About = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                            AccountId = 3,
                            Address = "Super Mocna Adresa 1",
                            CityId = 4,
                            Name = "Nova Agencija",
                            Phone = "+38761234567",
                            PostalCode = "71000",
                            Status = true,
                            WebsiteUrl = "nova.ba"
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Zivinice"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            Name = "Split"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 2,
                            Name = "Makarska"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 2,
                            Name = "Zadar"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 3,
                            Name = "Belgrade"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 3,
                            Name = "Novi Sad"
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 5,
                            Name = "France"
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facility");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Spa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Surfing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AC"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Wifi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bathroom"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pets"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pickup"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pool"
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Travelo.Services.Database.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("RatingScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeOfRating")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatingScore = 5.0,
                            TimeOfRating = new DateTime(2023, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RatingScore = 4.0,
                            TimeOfRating = new DateTime(2023, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            RatingScore = 5.0,
                            TimeOfRating = new DateTime(2023, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            RatingScore = 1.0,
                            TimeOfRating = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 4,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfReservation")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("TripItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("TripId");

                    b.HasIndex("TripItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NumberOfAdults = 2,
                            NumberOfChildren = 0,
                            Price = 3600,
                            TimeOfReservation = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 3,
                            TripItemId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            NumberOfAdults = 1,
                            NumberOfChildren = 0,
                            Price = 990,
                            TimeOfReservation = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 1,
                            TripItemId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            NumberOfAdults = 2,
                            NumberOfChildren = 0,
                            Price = 800,
                            TimeOfReservation = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 1,
                            TripItemId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            NumberOfAdults = 3,
                            NumberOfChildren = 1,
                            Price = 3000,
                            TimeOfReservation = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 2,
                            TripItemId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            NumberOfAdults = 2,
                            NumberOfChildren = 1,
                            Price = 4050,
                            TimeOfReservation = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 2,
                            TripItemId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            NumberOfAdults = 2,
                            NumberOfChildren = 0,
                            Price = 3000,
                            TimeOfReservation = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = 5,
                            TripItemId = 9,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Surfing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hot"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Summer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Beach"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cabins"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Camping"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Farms"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Skiing"
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.TravelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TravelType");
                });

            modelBuilder.Entity("Travelo.Services.Database.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccomodationId")
                        .HasColumnType("int");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccomodationId");

                    b.HasIndex("AgencyId");

                    b.ToTable("Trip");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccomodationId = 1,
                            AgencyId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccomodationId = 2,
                            AgencyId = 1
                        },
                        new
                        {
                            Id = 3,
                            AccomodationId = 3,
                            AgencyId = 2
                        },
                        new
                        {
                            Id = 4,
                            AccomodationId = 4,
                            AgencyId = 2
                        },
                        new
                        {
                            Id = 5,
                            AccomodationId = 5,
                            AgencyId = 2
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.TripItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("PricePerPerson")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckIn = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 99,
                            TripId = 1
                        },
                        new
                        {
                            Id = 2,
                            CheckIn = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 99,
                            TripId = 1
                        },
                        new
                        {
                            Id = 3,
                            CheckIn = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 80,
                            TripId = 1
                        },
                        new
                        {
                            Id = 4,
                            CheckIn = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 150,
                            TripId = 2
                        },
                        new
                        {
                            Id = 5,
                            CheckIn = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 150,
                            TripId = 2
                        },
                        new
                        {
                            Id = 6,
                            CheckIn = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 200,
                            TripId = 3
                        },
                        new
                        {
                            Id = 7,
                            CheckIn = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 250,
                            TripId = 4
                        },
                        new
                        {
                            Id = 8,
                            CheckIn = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 300,
                            TripId = 4
                        },
                        new
                        {
                            Id = 9,
                            CheckIn = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 100,
                            TripId = 5
                        },
                        new
                        {
                            Id = 10,
                            CheckIn = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricePerPerson = 100,
                            TripId = 5
                        });
                });

            modelBuilder.Entity("Travelo.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Address = "Mostarska 1",
                            CityId = 2,
                            FirstName = "Tester",
                            LastName = "Testerovic",
                            PostalCode = "88000",
                            Status = true,
                            Username = "Tester"
                        });
                });

            modelBuilder.Entity("TripUser", b =>
                {
                    b.Property<int>("TripsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("TripsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TripUser");
                });

            modelBuilder.Entity("AccomodationFacility", b =>
                {
                    b.HasOne("Travelo.Services.Database.Accomodation", null)
                        .WithMany()
                        .HasForeignKey("AccomodationsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CityTag", b =>
                {
                    b.HasOne("Travelo.Services.Database.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.City", null)
                        .WithMany()
                        .HasForeignKey("citiesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Travelo.Services.Database.Accomodation", b =>
                {
                    b.HasOne("Travelo.Services.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Travelo.Services.Database.Address", b =>
                {
                    b.HasOne("Travelo.Services.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Travelo.Services.Database.Agency", b =>
                {
                    b.HasOne("Travelo.Services.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Travelo.Services.Database.City", b =>
                {
                    b.HasOne("Travelo.Services.Database.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Travelo.Services.Database.PaymentMethod", b =>
                {
                    b.HasOne("Travelo.Services.Database.User", "User")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelo.Services.Database.Rating", b =>
                {
                    b.HasOne("Travelo.Services.Database.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelo.Services.Database.Reservation", b =>
                {
                    b.HasOne("Travelo.Services.Database.Agency", null)
                        .WithMany("Reservations")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Travelo.Services.Database.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.TripItem", "TripItem")
                        .WithMany()
                        .HasForeignKey("TripItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("TripItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelo.Services.Database.Trip", b =>
                {
                    b.HasOne("Travelo.Services.Database.Accomodation", "Accomodation")
                        .WithMany()
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.Agency", "Agency")
                        .WithMany("Trips")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Accomodation");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Travelo.Services.Database.TripItem", b =>
                {
                    b.HasOne("Travelo.Services.Database.Trip", "Trip")
                        .WithMany("TripItems")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Travelo.Services.Database.User", b =>
                {
                    b.HasOne("Travelo.Services.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");
                });

            modelBuilder.Entity("TripUser", b =>
                {
                    b.HasOne("Travelo.Services.Database.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Travelo.Services.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Travelo.Services.Database.Agency", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Travelo.Services.Database.Trip", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("TripItems");
                });

            modelBuilder.Entity("Travelo.Services.Database.User", b =>
                {
                    b.Navigation("PaymentMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
